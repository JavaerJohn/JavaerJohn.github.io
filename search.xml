<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nginx 的负载均衡策略</title>
      <link href="/nginx-de-fu-zai-jun-heng-ce-lue.html"/>
      <url>/nginx-de-fu-zai-jun-heng-ce-lue.html</url>
      
        <content type="html"><![CDATA[<!-- # Nginx 的负载均衡策略 --><p><a href="https://www.cnblogs.com/1214804270hacker/p/9325150.html" target="_blank" rel="noopener">https://www.cnblogs.com/1214804270hacker/p/9325150.html</a></p><h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h2><p>高并发场景下，如天猫双十一当天，某个服务的瞬时访问量及其庞大，此时即使将服务器升级到现有的顶级物理配置，也可能无法满足需求。这个时候可以拓展服务器的数量，将数据流量分摊到多个服务器上，减轻每台服务器的压力，这种应用就称为负载均衡。</p><p>Nginx 支持的负载均衡策略分为内置策略和扩展策略：</p><h2 id="2-内置策略"><a href="#2-内置策略" class="headerlink" title="2. 内置策略"></a>2. 内置策略</h2><h3 id="2-1-轮询"><a href="#2-1-轮询" class="headerlink" title="2.1 轮询"></a>2.1 轮询</h3><p>将请求依次分发到不同的后端服务器，如果某个服务器宕机，Nginx 可自动将其剔除。</p><h3 id="2-2-加权轮询"><a href="#2-2-加权轮询" class="headerlink" title="2.2 加权轮询"></a>2.2 加权轮询</h3><p>为每台服务器都分配一个权重值，权重值越高的机器被分配请求量也越大，加权轮询多用于后端服务器性能不均的情况。</p><h3 id="2-3-ip-hash"><a href="#2-3-ip-hash" class="headerlink" title="2.3 ip_hash"></a>2.3 ip_hash</h3><p>对客户端请求的 IP 进行 Hash 运算，然后根据 Hash 结果将请求分发给对应的服务器。这中方法能够确保同一客户端的不同请求总是由相同的服务器处理，从而解决了 Session 不共享的问题。</p><h3 id="2-4-最少连接分配"><a href="#2-4-最少连接分配" class="headerlink" title="2.4 最少连接分配"></a>2.4 最少连接分配</h3><p>将请求转发给连接数较少的后端服务器，轮询方案是将请求平均分配给各个服务器，使它们的负载大致相同。然而，处理某些请求可能非常耗时，这将导致其所在的后端负载较高。这种情况下，使用 least_conn 就可以达到更好的负载均衡效果。</p><h2 id="3-扩展策略"><a href="#3-扩展策略" class="headerlink" title="3. 扩展策略"></a>3. 扩展策略</h2><p>扩展策略的实现需要安装第三方插件。</p><h3 id="3-1-fair"><a href="#3-1-fair" class="headerlink" title="3.1 fair"></a>3.1 fair</h3><p>按照服务器端的响应时间来分配请求，响应时间短的优先分配。</p><h3 id="3-2-url-hash"><a href="#3-2-url-hash" class="headerlink" title="3.2 url_hash"></a>3.2 url_hash</h3><p>对访问的 URL 进行 Hash 运算，然后根据 Hash 的结果来分配请求，这样同一个 URL 总会定向到同一个后端服务器。此种范式适用于后端服务器作为缓存时的情况，因为缓存的命中率比较高。 </p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 快速入门</title>
      <link href="/nginx-ru-men.html"/>
      <url>/nginx-ru-men.html</url>
      
        <content type="html"><![CDATA[<!-- # Nginx 快速入门 --><h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h2><p>Nginx 是一个高性能的 HTTP 和反向代理 Web 服务器，同时它提供了 IMAP、POP3 以及 SMTP 等服务，因此也可作为电子邮件代理服务器。Nginx 占用内存少，并发能力强，目前已被许多国内产商所使用。</p><h2 id="2-为什么使用-Nginx"><a href="#2-为什么使用-Nginx" class="headerlink" title="2. 为什么使用 Nginx"></a>2. 为什么使用 Nginx</h2><p>网站建设初期，由于用户数比较少，并发量比较低，一台服务器基本能够满足我们的需求，通过部署 Tomcat 就能将数据信息返回给用户。</p><img src="http://r9eatfbfc.hb-bkt.clouddn.com/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/%E5%8D%95%E7%94%A8%E6%88%B7.png" width="70%"><p>慢慢的，随着用户数不断增大，较高的并发量使得服务器上处理请求的线程和数据库承受着巨大压力，这将导致请求的响应时间被不断拉长，大量服务超时，最终服务器的可用连接数被耗尽，不再接收新的请求。</p><img src="http://r9eatfbfc.hb-bkt.clouddn.com/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/%E5%A4%9A%E7%94%A8%E6%88%B7.png" width="70%"><p>一个可行的解决办法是做水平扩展，增加多台服务器，这样不同用户的请求可以由不同的服务器受理，从而大大减小了每台服务器的压力。值得注意的是，分布式系统中各个服务器之间可能并不共享用户的 Session 信息，所以需要一个中间层服务器将一个用户的不同请求路由到同一台服务器上。不仅如此，该中间层服务器还需要使得各个服务器接收的请求量保持均衡，以获得最佳体验。</p><img src="http://r9eatfbfc.hb-bkt.clouddn.com/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/%E4%B8%AD%E9%97%B4%E5%B1%82%E6%9C%8D%E5%8A%A1%E5%99%A8.png" width="70%"><p>基于上述考虑，我们可以使用 Nginx 进行转发和处理请求。Nginx 首先接收用户的请求，然后根据用户的身份以及服务器的性能将请求路由到对应的服务器节点上，该过程对用户来说是无感知的，用户并不知道具体是哪台服务器在处理请求。</p><img src="http://r9eatfbfc.hb-bkt.clouddn.com/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/Nginx.png" width="70%"><h2 id="3-Nginx-主要功能"><a href="#3-Nginx-主要功能" class="headerlink" title="3. Nginx 主要功能"></a>3. Nginx 主要功能</h2><p>Nginx 可以作为反向代理和负载均衡服务器，还可以作为 HTTP 服务器实现 Web 服务的动静分离。</p><h3 id="3-1-正向代理"><a href="#3-1-正向代理" class="headerlink" title="3.1 正向代理"></a>3.1 正向代理</h3><p>正向代理类似于一个跳板机，代理客户端访问外部资源。比如国内用户直接访问 Google 时请求会被阻塞，但是挂上 VPN 后就可以正常访问了。这里的 VPN 实际上就是正向代理服务器，用户的请求首先发送给代理服务器，代理服务器能够访问 Google，之后代理服务器接收到 Google 的响应并将该响应返回给用户。对于 Google 服务器来说，它只知道代理服务器发送了多个请求，而并不知道这些请求具体来自于哪些用户。</p><p><img src="http://r9eatfbfc.hb-bkt.clouddn.com/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8.png" width="70%"></p><p>正向代理的用途：</p><ol><li><p>访问原先无法访问的资源。</p></li><li><p>用做缓存，加快资源的访问。</p></li><li><p>对客户端做鉴权。</p></li><li><p>实现匿名访问，对后端服务器隐藏真实的 IP。</p></li></ol><h3 id="3-2-反向代理"><a href="#3-2-反向代理" class="headerlink" title="3.2 反向代理"></a>3.2 反向代理</h3><p>反向代理指的是指利用代理服务器接受用户的请求，代理服务器将请求转发给某一个内网服务器，并将得到的响应返回给对应的客户端，此时整个后端服务对外就表现为一个代理服务器。比如访问 Baidu，Baidu 的服务实际上是部署在多台机器上的，但是我们每次访问的都是同一个地址 www.<span></span>baidu<span></span>.com，这里的 www.<span></span>baidu.<span></span>com 其实就是反向代理服务器。对客户端来说，它只知道请求都是发送给了代理服务器，而并不知道具体是哪一个真实服务器在处理请求，后续无论动态扩容多少台服务器，客户端也总是访问 www.<span></span>baidu.<span></span>com。</p><p><img src="http://r9eatfbfc.hb-bkt.clouddn.com/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8.png" width="70%"></p><p>反向代理的用途：</p><ol><li><p>隐藏后端服务器集群的 IP，保证内网安全。通常反向代理服务器的 IP 会作为公网地址供用户访问，而代理服务器和后端服务器使用内网进行通信。</p></li><li><p>负载均衡，利用反向代理服务器可以优化各个后端服务器的负载。</p></li></ol><p><strong>正向代理和反向代理小结</strong></p><ul><li><p>正向代理代理的对象是客户端，它隐藏了真实的客户端，服务端不知道真正的客户端是谁。</p></li><li><p>反向代理代理的对象是服务端，它隐藏了真实的服务端，客户端不知道具体是哪台服务器做出的回应。</p></li></ul><h3 id="3-4-负载均衡"><a href="#3-4-负载均衡" class="headerlink" title="3.4 负载均衡"></a>3.4 负载均衡</h3><p>高并发场景下，如天猫双十一当天，某个服务的瞬时访问量及其庞大，此时即使将服务器升级到现有的顶级物理配置，也可能无法满足需求。这个时候可以拓展服务器的数量，将数据流量分摊到多个服务器上，减轻每台服务器的压力，这种应用就称为负载均衡。Nginx 支持的负载均衡策略分为内置策略和扩展策略，其中内置策略就是轮询，扩展策略需要借助第三方插件来实现。</p><p>内置策略有：</p><ol><li><p>轮询：将请求依次分发到不同的后端服务器，如果某个服务器宕机，Nginx 可自动将其剔除。</p></li><li><p>加权轮询：为每台服务器都分配一个权重值，权重值越高的机器被分配请求量也越大，加权轮询多用于后端服务器性能不均的情况。</p></li><li><p>ip_hash：对客户端请求的 IP 进行 Hash 运算，然后根据 Hash 结果将请求分发给对应的服务器。这种方法能够确保同一客户端的不同请求总是由相同的服务器处理，从而解决了 Session 不共享的问题。</p></li><li><p>最少连接分配 least_conn：将请求转发给连接数较少的后端服务器，轮询方案是将请求平均分配给各个服务器，使它们的负载大致相同。然而，某些请求处理起来可能非常耗时，这可能导致其所在后端的负载显著提高，此时使用 least_conn 就可以达到更好的负载均衡效果。</p></li></ol><p>扩展策略有：</p><ol><li><p>fair：按照服务器端的响应时间来分配请求，响应时间短的优先分配。</p></li><li><p>url_hash：对访问的 URL 进行 Hash 运算，然后根据 Hash 的结果来分配请求，这样同一个 URL 总会定向到同一个后端服务器。此种方式适用于后端服务器作为缓存时的情况，因为缓存的命中率比较高。 </p></li></ol><h3 id="3-5-动静分离"><a href="#3-5-动静分离" class="headerlink" title="3.5 动静分离"></a>3.5 动静分离</h3><p>由于 Nginx 可以根据配置对不同的请求做不同的转发，因此可用来实现动静分离。动静分离指的是将动态请求（需要后台处理的请求）和静态请求（不需要后台处理的请求，如请求 css、html、js、图片等静态资源）分离开，然后将静态请求对应的静态资源直接放在 Nginx 上做缓存，或者放在指定的服务器上，而动态请求仍由相应的后端服务器处理，这样可以使整个服务器系统的性能、效率更高。</p><h2 id="4-Nginx-配置"><a href="#4-Nginx-配置" class="headerlink" title="4. Nginx 配置"></a>4. Nginx 配置</h2><p><strong>基础配置文件</strong></p><p>nginx.conf 是 Nginx 的基础配置文件，其默认内容如下：</p><p><img src="http://r9eatfbfc.hb-bkt.clouddn.com/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/nginx.conf.png" width="70%"></p><p>该配置文件总共包含三个部分：全局块、events 块、http 块。</p><ol><li><p>全局块：从配置文件开始到 events 块之间的内容为全局块，全局块中设置了一些影响 Nginx 服务器整体运行性能的配置指令，包括配置运行 Nginx 的用户（组），允许生成的 worker process 数，进程 PID 存放路径、日志的级别和存放路径等。例如上述配置文件中，<code>worker_processes 1;</code> 表示 Nginx 并发处理的进程数，该值越大，可支持的并发处理量也越多。</p></li><li><p>events 块：<code>events{}</code> 括号所包含的内容为 events 块，events 块涉及的指令主要影响 Nginx 服务器和用户之间的网络连接，如 <code>worker_connections  1024;</code> 表示每个 worker process 支持的最大连接数为 1024。events 块中的配置对 Nginx 的性能影响较大，实际中应灵活配置。</p></li><li><p>http 块：<code>https{}</code> 括号所包含的内容为 http 块，http 块中主要用来设置反向代理、缓存、日志定义以及第三方模块的配置。http 块包含 http 全局块和 server 块。</p></li></ol><ul><li><p>http 全局块：http 全局块配置的指令包括文件引入、mime-type 定义、日志自定义、连接超时时间、单连接请求数上限等。</p></li><li><p>server 块：server 块与虚拟主机联系紧密，每个 http 块可以包含多个 server 块，而每个server 块就相当于一个虚拟主机。server 块也分为全局 server 块和 location 块。</p><ul><li><p>全局 server 块：主要配置虚拟主机的名称或 IP 地址、监听的端口号等。</p></li><li><p>location 块：主要配置请求的路由，各种页面的处理情况以及数据的缓存等。当请求的路径满足 location 块中设定的路径匹配规则时，程序就会进入 location 块执行相应的操作，如请求跳转等。下图中，Nginx 会监听主机 <code>localhost</code> 的 <code>80</code> 端口（由 server_name 和 listen 配置），当访问 <code>localhost:80</code> 时，会自动跳转到 <code>127.0.0.1:8080</code>。</p></li></ul></li></ul><p><img src="http://r9eatfbfc.hb-bkt.clouddn.com/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/Server.png" width="50%"></p><p><strong>location 匹配规则</strong></p><p>location 块中 <code>location</code> 关键词后跟的是一个字符串或正则表达式，其基本语法为 <code>location [=|~|~*|^~] uri {……}</code>。如果请求的 URI 匹配该正则表达式，那么就进入 location 块。</p><p><code>无任何修饰符</code>表示前缀匹配，当请求的 URI 的开头与 location 后的 URI 匹配时，则进入 location 块：</p><pre class="line-numbers language-bash"><code class="language-bash">server <span class="token punctuation">{</span>　　server_name baidu.com<span class="token punctuation">;</span>　　location /hello <span class="token punctuation">{</span>　　　　……　　<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#如下请求均匹配：</span><span class="token comment" spellcheck="true">#http://baidu.com/hello</span><span class="token comment" spellcheck="true">#http://baidu.com/hello?a=1</span><span class="token comment" spellcheck="true">#http://baidu.com/hello/</span><span class="token comment" spellcheck="true">#http://baidu.com/helloo 虽然 /helloo 与 /hello 匹配, 但最终访问的仍然是 http://真实服务器IP:端口/helloo</span><span class="token comment" spellcheck="true">#如下请求不匹配：</span><span class="token comment" spellcheck="true">#http://baidu.com/hell</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>=</code> 表示精确匹配：</p><pre class="line-numbers language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    server_name baidu.com　　location <span class="token operator">=</span> /hello <span class="token punctuation">{</span>　　　　……　　<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#如下请求均匹配：</span><span class="token comment" spellcheck="true">#http://baidu.com/hello</span><span class="token comment" spellcheck="true">#http://baidu.com/hello?a=1</span><span class="token comment" spellcheck="true">#如下请求均不匹配：</span><span class="token comment" spellcheck="true">#http://baidu.com/hello/</span><span class="token comment" spellcheck="true">#http://baidu.com/helloo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>~</code> 表示区分大小写的前缀匹配:</p><pre class="line-numbers language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    server_name baidu.com<span class="token punctuation">;</span>　　location ~ /hello <span class="token punctuation">{</span>　　　　……　　<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#如下请求均匹配：</span><span class="token comment" spellcheck="true">#http://baidu.com/hello</span><span class="token comment" spellcheck="true">#http://baidu.com/hello?a=1</span><span class="token comment" spellcheck="true">#http://baidu.com/hello/</span><span class="token comment" spellcheck="true">#http://baidu.com/helloo</span><span class="token comment" spellcheck="true">#如下请求均不匹配：</span><span class="token comment" spellcheck="true">#http://baidu.com/Hello</span><span class="token comment" spellcheck="true">#http://baidu.com/hellO</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    server_name baidu.com<span class="token punctuation">;</span>　　location ~ ^/hello$ <span class="token punctuation">{</span>　　　　……　　<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#如下请求均匹配：</span><span class="token comment" spellcheck="true">#http://baidu.com/hello</span><span class="token comment" spellcheck="true">#http://baidu.com/hello?a=1</span><span class="token comment" spellcheck="true">#如下请求均不匹配：</span><span class="token comment" spellcheck="true">#http://baidu.com/hello/</span><span class="token comment" spellcheck="true">#http://baidu.com/helloo</span><span class="token comment" spellcheck="true">#http://baidu.com/Hello</span><span class="token comment" spellcheck="true">#http://baidu.com/hellO</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>~*</code> 表示不区分大小写的前缀匹配:</p><pre class="line-numbers language-bash"><code class="language-bash">server <span class="token punctuation">{</span>    server_name baidu.com<span class="token punctuation">;</span>    location ~* /hello <span class="token punctuation">{</span>　　　　……　　<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#如下请求均匹配：</span><span class="token comment" spellcheck="true">#http://baidu.com/hello</span><span class="token comment" spellcheck="true">#http://baidu.com/hello?a=1</span><span class="token comment" spellcheck="true">#http://baidu.com/helloo</span><span class="token comment" spellcheck="true">#http://baidu.com/HELLO </span><span class="token comment" spellcheck="true">#http://baidu.com/hello/</span><span class="token comment" spellcheck="true">#所以无修饰符的前缀匹配与不区分大小的写前缀匹配有什么区别？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>^~</code> 的匹配规则与无修饰符的情况相似，不同的是，匹配成功之后，会停止搜索后面的正则表达式。</p><p><strong>以上匹配规则均是在 Linux 操作系统下测试得出，可能 Windows 和 Mac OS 系统下请求的 URL 仍然是大小写不敏感的。另外，如有错误欢迎批评指正！</strong></p><p>Nginx 做请求转发时，如果请求的 URI 与多个 location 块中定义的 URI 匹配，那么应该如何做跳转呢？Nginx 中规定了匹配的优先级：</p><ol><li><p>带有 “=” 的精确匹配。</p></li><li><p>无修饰符的精确匹配。</p></li><li><p>带有 “^~” 修饰符的前缀匹配。</p></li><li><p>按照正则表达式在配置文件中定义的顺序进行匹配。</p></li><li><p>带有 “~“ 或  “~*” 修饰符的前缀匹配。</p></li><li><p>无修饰符的前缀匹配。</p></li><li><p>通用匹配 “/“。</p></li></ol><h2 id="5-Nginx-常用命令"><a href="#5-Nginx-常用命令" class="headerlink" title="5. Nginx 常用命令"></a>5. Nginx 常用命令</h2><p>Nginx 的启动、停止、更新配置文件后的重新加载命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/nginx/sbin/  <span class="token comment" spellcheck="true">#Linux 下 Nginx 的默认安装目录</span>./nginx  <span class="token comment" spellcheck="true">#启动</span>./nginx -s stop  <span class="token comment" spellcheck="true">#停止</span>./nginx -s quit  <span class="token comment" spellcheck="true">#安全退出</span>./nginx -s reload  <span class="token comment" spellcheck="true">#重新加载配置文件, Nginx 启动后如果修改了配置文件, 可执行该命令重新加载</span><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> nginx  <span class="token comment" spellcheck="true">#查看 Nginx 进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Nginx-简单使用"><a href="#5-Nginx-简单使用" class="headerlink" title="5. Nginx 简单使用"></a>5. Nginx 简单使用</h2><p><strong>设计思路</strong></p><p>首先在 Windows 主机中安装 Nginx，然后使用 VirtualBox 或 VMware 启动两台虚拟机，并将后端服务部署在这两台虚拟机中。此时，部署 Nginx 的 Windows 主机负责接收请求，而两台 Linux 虚拟机则充当后端服务器，当有请求到达时，Nginx 服务器根据配置将该请求路由到真实的服务器（虚拟机）中。</p><p><strong>后端服务</strong></p><p>写一个简单的 “Hello World” 项目： </p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token annotation punctuation">@Log</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"I'm fine, thank you."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将该项目打成 jar 包，分别部署在两台虚拟机中。正常情况下该服务会返回 “Hello, world!” 字符串，并打印日志 “I’m fine, thank you.”，为了更好地区分请求由哪台虚拟机处理，我们将其中一个服务中打印的日志修改为 “And you?”。</p><p><strong>Nginx 配置</strong></p><p>接着打开 Nginx 的配置文件 nginx.conf，配置反向代理和负载均衡策略：</p><pre class="line-numbers language-bash"><code class="language-bash">upstream nginxTest <span class="token punctuation">{</span>    server 192.168.3.118:8080 weight<span class="token operator">=</span>1<span class="token punctuation">;</span>    server 192.168.3.124:8080 weight<span class="token operator">=</span>1<span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>    listen       80<span class="token punctuation">;</span>    server_name  localhost<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#charset koi8-r;</span>    <span class="token comment" spellcheck="true">#access_log  logs/host.access.log  main;</span>    location / <span class="token punctuation">{</span>        root   html<span class="token punctuation">;</span>        index  index.html index.htm<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    location /hello <span class="token punctuation">{</span>        proxy_pass http://nginxTest<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">#路由到 http://192.128.3.xxx:8080/hello</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>upstream 块中定义的是负载均衡服务器的列表，weight 表示每个 server 的权重。</p><p><strong>测试</strong></p><p>在 Windows 主机的浏览器中访问 localhost:80/hello，得到响应 “Hello, world!”，多次访问后可以发现，两台 Linux 虚拟机均打印出了相应的日志：</p><p>主机 1：<br><img src="http://r9eatfbfc.hb-bkt.clouddn.com/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/Centos.png" width="70%"></p><p>主机 2：<br><img src="http://r9eatfbfc.hb-bkt.clouddn.com/Nginx%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/Ubuntu.png" width="70%"></p><p>这说明请求会被随机分配给两台主机，因为我们在配置文件中为它们设置了相同的权重。</p><p><strong>注意事项</strong></p><p>上述操作中，需要确保 Windows 主机与两台虚拟机可以相互 Ping 通。当然也可以使用一台主机（Windows 或 Linux）来完成测试，只需要在主机上启动多个后端服务并分别设置不同的服务端口，之后在 nginx.cof 中配置相关的路由规则。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux学习（五）：用户组</title>
      <link href="/linux-xue-xi-wu-yong-hu-zu.html"/>
      <url>/linux-xue-xi-wu-yong-hu-zu.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h2><p>Linux 中每个用户都必须属于一个组，不能独立于组之外。在 Linux 中每个文件有所有者、所在组、其他组的概念。</p><h2 id="2-文件所有者"><a href="#2-文件所有者" class="headerlink" title="2. 文件所有者"></a>2. 文件所有者</h2><ul><li>ls -ahl：查看文件或目录的所有者。</li></ul><ul><li>chown 用户名 文件名：修改文件的所有者。</li></ul><h2 id="3-文件所在组"><a href="#3-文件所在组" class="headerlink" title="3. 文件所在组"></a>3. 文件所在组</h2><ul><li>cat /etc/group：查看有哪些组。</li></ul><ul><li>groupadd 组名：创建一个组。</li></ul><ul><li>useradd -g 组名 用户名：创建一个用户，并将该用户放到指定组内。当某个用户创建了一个文件后，该文件的所在组就是该用户所在的组。</li></ul><ul><li>chgrp 组名 文件名：修改文件所在的组。</li></ul><h2 id="4-其他组"><a href="#4-其他组" class="headerlink" title="4. 其他组"></a>4. 其他组</h2><p>除文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组。</p><ul><li>usermod -g 组名 用户名：修改用户所在组。</li></ul><ul><li>usermod -d 目录名 用户名：修改用户登录的初始目录。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 用户组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端知识点总结</title>
      <link href="/1.html"/>
      <url>/1.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/01.png" alt></p><p><font color="magenta" size="4"><strong>在搭建过程中遇到问题欢迎来骚扰我哈！<font color="red" size="4"> V：godxiaolong，QQ:1571504536</font>，如果觉得有帮助的话不介意打赏一杯奶茶哟~</strong></font></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/02.png" alt></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li><p>作为一名计算机爱好者，摸索了一周搭建出自己的博客。目前只学    习了c语言，没有任何前端知识和网站开发经验，总的来说，算不上很难，     但也要费些心思。网上各类教程应有尽有，只要肯摸索，还是水到渠成的事。另外，写下这篇文章，记录下自己的经验，给需要的朋友，祝你早日拥有自己的博客！</p></li><li><p>搭建博客的初衷是希望用博客记录下自己的学习过程，帮助自己复习，分享一部分不成熟的思考，敦促自己把既定的目标完成。</p></li><li><p><strong>为什么要搭建自己的博客？可以看看这三篇文章：</strong></p></li></ul><p><a href="http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/" title="为什么你应该（从现在开始就）写博客" target="_blank" rel="noopener">《为什么你应该（从现在开始就）写博客》</a>   (By 刘未鹏 | Mind Hacks)</p><p><a href="https://www.zhihu.com/question/19916345" title="为什么要自建博客？" target="_blank" rel="noopener">《为什么要自建博客？》</a>   (By 知乎)</p><p><a href="https://www.cnblogs.com/jhzhu/p/3893297.html" title="我为什么写博客" target="_blank" rel="noopener">《我为什么写博客》</a> （By 知明所以）</p><p>我们需要知道搭建博客要用到的框架。<font color="red" size="3">Hexo</font>是高效的静态站点生成框架，它基于<font color="red" size="3">Node.js</font>。我们使用<font color="red" size="3">MarkDown</font>在本地编辑我们的博客文章，通过<font color="red" size="3">Hexo</font>生成静态页面，再用两条命令即可部署到我们的网站。无需关心网页源代码的具体细节，我们只需要用心写好自己的博客内容就行。</p><h2 id="本文目录"><a href="#本文目录" class="headerlink" title="本文目录"></a>本文目录</h2><ul><li><strong>快速搭建</strong></li><li>安装<font color="red" size="3">Node.js</font></li><li>添加国内镜像</li><li>安装<font color="red" size="3">Git </font></li><li>注册<font color="red" size="3">Github</font>账号</li><li>创建<font color="red" size="3">Git</font>仓库</li><li>安装<font color="red" size="3">Hexo</font> </li><li>配置本地<font color="red" size="3">Hexo</font></li><li>连接<font color="red" size="3">Github</font>与本地 </li><li>写文章、发布文章 </li><li><font color="red" size="3">MarkDown</font>文章编辑器说明</li><li>配置个性化域名</li><li>更换自己喜欢的<font color="red" size="3">Hexo</font>主题</li><li>我的博客源代码</li><li>结语</li></ul><hr><h1 id="快速搭建"><a href="#快速搭建" class="headerlink" title="快速搭建"></a>快速搭建</h1><p>有的朋友可能不想去折腾，自定义主题也比较麻烦，亦或有尝试几次搭建却失败，那就可以看这部分。快速搭建可以帮助我们更快搭建出自己的博客，优点是别人博客有的东西你都有，就跟复制差不多；缺点是博客里的配置信息都是别人的，不过不要紧，稍稍改改配置就可以。</p><p>在这里以我的博客为例。</p><h2 id="一、下载博客源代码"><a href="#一、下载博客源代码" class="headerlink" title="一、下载博客源代码"></a>一、下载博客源代码</h2><p>大家可以直接素质二连，<font color="red" size="3">Star&amp;Fork</font>我的博客源代码：<a href="https://github.com/MUYIio/hexo-themes-matery" target="_blank" rel="noopener">https://github.com/MUYIio/hexo-themes-matery</a>，这里我给出两种下载方法：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/03.png" alt></p><p><strong>第一种</strong>：直接<font color="red" size="3">DownLoad</font>，下载到本地就可以。（<strong>不推荐</strong>）</p><p><strong>第二种</strong>：如果你已经安装了<a href="https://git-scm.com/download/win" title="Git" target="_blank" rel="noopener">Git</a>，就可以右键单击<font color="red" size="3">Come Bash Here</font>运行</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> clone git@github.com:MUYIio/hexo-themes-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将所有文件下载到本地，这个复杂一点。</p><h2 id="二、修改博客文档配置"><a href="#二、修改博客文档配置" class="headerlink" title="二、修改博客文档配置"></a>二、修改博客文档配置</h2><p>首先将我们下载的博客源代码解压，然后修改主要配置：</p><ul><li>根目录配置文件<font color="red" size="3">_config.yml</font>和主题目录配置文件<font color="red" size="3">_config.yml</font>中修改个人信息。</li><li>根目录配置文件中修改<font color="red" size="3">deploy</font>一栏的<font color="red" size="3">repository</font>。</li><li>根目录配置文件中修改<font color="red" size="3">baidu_url_submit</font>一栏的<font color="red" size="3">token</font>。</li><li>主题配置文件中修改<font color="red" size="3">gitalk</font>一栏，修改方法见正文。</li></ul><p>我给出的是博客比较明显的几个地方，先修改这几个地方，其它的可以自己慢慢摸索修改。</p><p>最后一步，<strong>本地的运行环境还是需要搭建好的</strong>，跟着下文操作到连接Github与本地，环境就算是搭建完成。</p><p><strong>本地环境搭建好之后会生成的文件：</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/35.png" alt></p><p>然后直接把<font color="red" size="3">Hexo</font>文件夹里面的文件删掉，把我的源代码的文件全部移动过来，就是这样了：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/37.png" alt></p><p>然后在<font color="red" size="3">Hexo</font>文件夹下右键单击鼠标，点击 <font color="red" size="3">Git Bash Here</font>点击输入以下命令上传就可以了：</p><pre><code>hexo cleanhexo ghexo d</code></pre><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>了解一下什么是<font color="red" size="3">Node.js</font>：</p><blockquote><p><font color="red" size="3">Node.js</font>就是一个用于创建服务器端应用程序的运行系统，它可以轻松构建网络或其他事件驱动的应用程序服务器。</p></blockquote><p>需要用到的命令：</p><pre><code>$ git --version$ node -v$ npm -v</code></pre><p><a href="https://nodejs.org/en/download/" title="Node.js" target="_blank" rel="noopener">点击此处</a>进入<font color="red" size="3">Node.js</font>官网下载相应版本即可，安装时选项全部默认，一路点击<font color="red" size="3">Next</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/04.png" alt></p><p>检验是否安装成功：<br>按<font color="red" size="3">Win+R</font>打开命令提示符，输入<font color="red" size="3">node -v</font>和<font color="red" size="3">npm -v</font>，如果出现版本号，那么就安装成功了。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/05.png" alt></p><h1 id="添加国内镜像"><a href="#添加国内镜像" class="headerlink" title="添加国内镜像"></a>添加国内镜像</h1><p>这里我们使用阿里的国内镜像进行加速，按Win+R打开命令提示符输入：</p><pre><code>npm config set registry https://registry.npm.taobao.org</code></pre><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><blockquote><p><font color="red" size="3">Git</font>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理，帮助我们把本地网页上传到<font color="red" size="3">Github</font>。</p></blockquote><p><a href="https://git-scm.com/download/win" title="Git" target="_blank" rel="noopener">点击此处</a>进入Git官网下载相应版本，默认安装即可。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/005.png" alt></p><p>参考资料：<a href="https://www.cnblogs.com/jytx/p/5602927.html" title="如何在windows下安装GIT" target="_blank" rel="noopener">《如何在windows下安装GIT》</a> (By 俊雨廷休)</p><p>检验是否安装成功：</p><p>安装完成后在命令提示符中输入<font color="red" size="3">git –version</font>验证是否安装成功</p><pre><code>git --version</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/06.png" alt></p><h1 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h1><p><font color="red" size="3">Github</font>作为全球最大的开源社区，相信朋友们都已经有了吧，如果没有，<a href="https://github.com/" title="Github" target="_blank" rel="noopener">点击此处</a>进入<font color="red" size="3">Github</font>官网点击 <font color="red" size="3">Sign Up </font>注册账户。</p><h1 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h1><p>登录<font color="red" size="3">Github</font>创建一个仓库</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/07.png" alt></p><p>如下图所示，<strong>输入自己的项目名字，后面一定要加<font color="red" size="3">.github.io</font>后缀，<font color="red" size="3">README</font>初始化也要勾上。名称一定要和你的<font color="red" size="3">Github</font>名字完全一样，比如你<font color="red" size="3">github</font>名字叫<font color="red" size="3">A</font>，那么仓库名字一定要是<font color="red" size="3">A.github.io</font>。</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/08.png" alt></p><p>选择一个自己喜欢的主题：<br>在上面创建的仓库里面点击<font color="red" size="3">Settings</font>（不是头像下面那个<font color="red" size="3">Settings</font>），向下拉到最后有个<font color="red" size="3">GitHub Pages</font>，点击<font color="red" size="3">Choose a theme</font>选择一个主题。然后等一会儿，再回到<font color="red" size="3">GitHub Pages</font>，就可以预览效果啦。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/09.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/10.png" alt></p><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><blockquote><p><font color="red" size="3">Hexo</font>是一款基于<font color="red" size="3">Node.js</font>的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在<font color="red" size="3">GitHub</font>和<font color="red" size="3">Heroku</font>上，是搭建博客的首选框架。</p></blockquote><p>选择一个磁盘，新建一个文件夹用来存放博客文件。比如我的<font color="red" size="3">（C/panakot Blog）</font>，在该文件夹下右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>，输入以下<font color="red" size="3"> npm </font>命令即可安装</p><pre><code>$ npm install hexo-cli -g</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/11.png" alt></p><p>输入<font color="red" size="3">hexo -v</font>即可检验是否安装成功，我这里就不演示了。</p><h1 id="配置本地hexo"><a href="#配置本地hexo" class="headerlink" title="配置本地hexo"></a>配置本地hexo</h1><p>还是在刚才新建的文件夹下再新建一个<font color="red" size="3">Hexo</font>文件夹，比如我的<font color="red" size="3">（C/panakot Blog/Hexo）</font>，在<font color="red" size="3">Hexo</font>文件夹下右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>，依次输入以下<font color="red" size="3"> npm </font>命令即可初始化。</p><pre><code>hexo initnpm install</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/12.png" alt></p><p>初始化成功生成的文件：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/13.png" alt></p><p>接着我们输入<font color="red" size="3">hexo g</font>生成静态网页，然后输入<font color="red" size="3">hexo s</font>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，就可以预览我们的博客啦，如图：</p><p>显示以下信息说明操作正确：</p><p><code>INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/14.png" alt></p><p>按<font color="red" size="3">ctrl+c</font>关闭本地服务器。</p><p><strong>我们以后常用到的<font color="red" size="3">Hexo</font>命令：</strong></p><ul><li><p><font color="red" size="3">hexo s</font>等价于 <font color="red" size="3">hexo server</font>  #<font color="red" size="3">Hexo</font> 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p></li><li><p><font color="red" size="3">hexo g</font> 等价于 <font color="red" size="3">hexo generate</font>  #生成静态网页 (执行 $ <font color="red" size="3">hexo g</font>后会在站点根目录下生成<font color="red" size="3">public</font>文件夹,<font color="red" size="3"> hexo</font>会将”<font color="red" size="3">/blog/source/</font>“ 下面的<font color="red" size="3">.md</font>后缀的文件编译为<font color="red" size="3">.html</font>后缀的文件,存放在”<font color="red" size="3">/blog/public/ </font>“ 路径下)</p></li><li><p><font color="red" size="3">hexo d </font>等价于 <font color="red" size="3">hexo deploy</font>  #将本地数据部署到远端服务器(如<font color="red" size="3">github</font>)</p></li><li><p><font color="red" size="3">hexo clean </font> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的<font color="red" size="3">public</font>文件夹</p></li></ul><h1 id="连接Github与本地"><a href="#连接Github与本地" class="headerlink" title="连接Github与本地"></a>连接Github与本地</h1><h2 id="一、生成密钥"><a href="#一、生成密钥" class="headerlink" title="一、生成密钥"></a>一、生成密钥</h2><p>右键单击鼠标，点击 <font color="red" size="3">Git Bash Here</font>输入以下命令：</p><pre><code>git config --global user.name &quot;Name&quot;git config --global user.email &quot;Email&quot;</code></pre><p><strong><font color="red" size="3">Name</font>和<font color="red" size="3">Email</font>是我们注册<font color="red" size="3">Github</font>时的用户名和邮箱。</strong></p><p>然后生成密钥：</p><pre><code>ssh-keygen -t rsa -C &quot;Email&quot;</code></pre><p><strong><font color="red" size="3">Email</font>是我们注册<font color="red" size="3">Github</font>时的邮箱</strong></p><p>然后会出现：</p><pre><code>Generating public/private rsa key pair.Enter file in which to save the key (/c/Users/you/.ssh/id_rsa)://到这里可以直接回车将密钥按默认文件进行存储</code></pre><p>回车之后：</p><pre><code>Enter passphrase (empty for no passphrase)://这里是要你输入密码，其实不需要输什么密码，直接回车就行Enter same passphrase again:</code></pre><p>接下来会有：</p><pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.The key fingerprint is:这里是各种字母数字组成的字符串，结尾是你的邮箱The key&#39;s randomart image is:这里也是各种字母数字符号组成的字符串</code></pre><p>现在密钥已经生成，一般存放在<font color="red" size="3">（/c/Users/you/.ssh/id_rsa.pub.）</font>，我们运行下面的命令将密钥复制为粘贴板：</p><pre><code> clip &lt; ~/.ssh/id_rsa.pub</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/15.png" alt></p><h2 id="二、连接Github"><a href="#二、连接Github" class="headerlink" title="二、连接Github"></a>二、连接Github</h2><p>在<font color="red" size="3">Github</font>头像下面点击<font color="red" size="3">Settings</font>，再点击<font color="red" size="3">SSH and GPG keys</font>，新建一个<font color="red" size="3">SSH</font>，名字任意。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/16.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/17.png" alt></p><p>然后将刚才复制的密钥添加就可以了，像这样：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/18.png" alt></p><p><strong>本地连接Github</strong></p><p>右键单击鼠标，点击<font color="red" size="3"> Git Bash Here</font>输入以下命令，如果如下图所示，出现你的用户名，那就成功了</p><pre><code>ssh -T git@github.com//注意不要做任何修改</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/19.png" alt></p><p>用记事本打开博客根目录下的<font color="red" size="3">_config.yml</font>文件，这是博客的配置文件，我们需要修改一下才能连接<font color="red" size="3">Github</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/20.png" alt></p><p>修改最后一行的配置：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type:</code></pre><p>改为：</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repository: git@github.com:panakot/panakot.github.io.git  branch: master</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/21.png" alt></p><p>切记：</p><ul><li><strong><font color="red" size="3">repository</font>修改为你自己的<font color="red" size="3">github</font>项目地址</strong>。</li><li><strong>每一个冒号后面都有一个空格。</strong></li></ul><h1 id="写文章、发布文章"><a href="#写文章、发布文章" class="headerlink" title="写文章、发布文章"></a>写文章、发布文章</h1><p>首先在博客根目录下右键打开<font color="red" size="3">Git Bash Here</font>输入以下命令，安装一个扩展.</p><pre><code>npm i hexo-deployer-git</code></pre><p>然后输入下面的命令，新建一篇文章。</p><pre><code>hexo new post &quot;article title&quot;</code></pre><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/22.png" alt></p><p>然后打开<font color="red" size="3">C:\panakot Blog\Hexo\source_posts</font>的目录，可以发现下面多了一个文件夹和一个<font color="red" size="3">.md</font>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/23.png" alt></p><p>编写完<font color="red" size="3">markdown</font>文件后，根目录下右键打开<font color="red" size="3">Git Bash Here</font>输入<font color="red" size="3">hexo g</font>生成静态网页，然后输入<font color="red" size="3">hexo s</font>可以本地预览效果，最后输入<font color="red" size="3">hexo d</font>上传到<font color="red" size="3">github</font>上。</p><p>你的博客地址：<font color="red" size="3">https://你的用户名.github.io</font>，比如我的是：<a href="https://muyiio.github.io" target="_blank" rel="noopener">https://muyiio.github.io</a>，现在每个人都可以通过此链接访问你的博客</p><h1 id="MarkDown文章编辑器说明"><a href="#MarkDown文章编辑器说明" class="headerlink" title="MarkDown文章编辑器说明"></a>MarkDown文章编辑器说明</h1><blockquote><p>前面我们提到了使用<font color="red" size="3">MarkDown</font>编辑我们的博客文章。<font color="red" size="3"> Markdown</font> 是<font color="red" size="3"> 2004</font> 年由 <font color="red" size="3">John Gruberis </font>设计和开发的纯文本格式的语法，非常的简单实用，常用的标记符号屈指可数，几分钟即可学会，<font color="red" size="3"> .md </font>文件可以使用支持 <font color="red" size="3">Markdown </font>语法的编辑器编辑，然后将写好的文章<font color="red" size="3">（.md文件）</font>保存到<font color="red" size="3"> \Hexo\source_posts </font>文件夹下即可。</p></blockquote><p> <font color="red" size="3">Windows </font>上推荐使用 <font color="red" size="3">MarkdownPad2 </font>或者<font color="red" size="3">小书匠</font>编辑器，<font color="red" size="3">macOS </font>上使用<font color="red" size="3"> Mou</font> 编辑器，<font color="red" size="3">Linux </font>上使用 <font color="red" size="3">Remarkable</font> 编辑器，<font color="red" size="3">Web </font>端上使用 简书。</p><p><strong><a href="http://markdownpad.com/download.html" title="MarkDown" target="_blank" rel="noopener">点击此处</a>下载<font color="red" size="3">MarkDown</font><br>，刚使用的朋友或许不知道如何使用这个编辑器，只需要几分钟就可以掌握啦，给出以下几个我觉得不错的参考：</strong></p><p><a href="https://www.jianshu.com/p/q81RER/" title="献给写作者的 Markdown 新手指南" target="_blank" rel="noopener">《献给写作者的 Markdown 新手指南》</a> （By 简书）</p><p><a href="https://blog.csdn.net/u014061630/article/details/81359144?utm_source=app" title="Markdown语法图文全面详解" target="_blank" rel="noopener">《Markdown语法图文全面详解(10分钟学会)》</a>（By 黑暗星球）</p><p><a href="https://blog.csdn.net/witnessai1/article/details/52551362?utm_source=app" title="Markdown 语法手册 （完整整理版）" target="_blank" rel="noopener">《Markdown 语法手册 （完整整理版）》</a> （By witnessai1）</p><p><a href="https://sspai.com/post/25137" title="认识与入门 Markdown" target="_blank" rel="noopener">《认识与入门 Markdown》</a>（By Te_Lee）</p><p>写完文章记得在博客根目录<font color="red" size="3">Bash Here</font>输入<font color="red" size="3">hexo g</font>和<font color="red" size="3">hexo d</font>上传到网站。</p><h1 id="配置个性化域名"><a href="#配置个性化域名" class="headerlink" title="配置个性化域名"></a>配置个性化域名</h1><p>一顿操作下来，打开我们的博客还是：<font color="red" size="3"><a href="http://www.xxx.github.io" target="_blank" rel="noopener">www.xxx.github.io</a></font>，是不是很没有牌面？我们可以考虑购买一个专属域名，以后打开博客就是这样：<font color="red" size="3"><a href="http://www.xxx.com" target="_blank" rel="noopener">www.xxx.com</a> </font>。</p><p><a href="https://www.aliyun.com/" title="阿里云" target="_blank" rel="noopener">阿里云</a>和<a href="https://cloud.tencent.com/" title="腾讯云" target="_blank" rel="noopener">腾讯云</a>都可以，我的是腾讯云，购买域名后首先需要添加解析：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/24.png" alt></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/25.png" alt></p><p><strong>方法一：</strong>点击添加记录，需要添加两个记录，两个记录类型都是 <font color="red" size="3">CNAME </font>，第一个主机记录为<font color="red" size="3"> @ </font>，第二个主机记录为<font color="red" size="3"> www</font>，记录值都是填你自己的博客地址（比如我的是：<font color="red" size="3">muyiio.github.io</font>），保存之后域名解析就完成了！</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/27.png" alt></p><p><strong>方法二：</strong>两个记录类型为<font color="red" size="3"> A </font>，第一个主机记录为<font color="red" size="3"> @ </font>，第二个主机记录为<font color="red" size="3"> www</font>，记录值都为博客的<font color="red" size="3"> IP</font> 地址，<font color="red" size="3">IP </font>地址可以<font color="red" size="3"> cmd</font> 中输入<font color="red" size="3"> ping</font> 你的博客地址 获得（比如我的：<font color="red" size="3">ping muyiio.github.io</font>），保存之后域名解析就完成了！</p><p>参考资料：</p><p><a href="https://blog.csdn.net/it_man/article/details/9017307" title="域名解析中A记录、CNAME、MX记录、NS记录的区别和联系" target="_blank" rel="noopener">《域名解析中A记录、CNAME、MX记录、NS记录的区别和联系》</a></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/26.png" alt></p><p><strong>不管在哪个平台购买域名，操作都大同小异，这里说明两点</strong>：</p><blockquote><p>如果你填写的是没有<font color="red" size="3">www</font>的，比如 <font color="red" size="3">muyio.com</font>，那么无论是访问<font color="red" size="3"> <a href="https://www.muyiio.com" target="_blank" rel="noopener">https://www.muyiio.com</a> </font>还是<font color="red" size="3"> <a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a></font> ，都会自动跳转到<font color="red" size="3"> <a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a></font>。</p></blockquote><blockquote><p>如果你填写的是带<font color="red" size="3">www</font>的，比如 <font color="red" size="3"><a href="http://www.muyiio.com" target="_blank" rel="noopener">www.muyiio.com</a> </font>，那么无论是访问 <font color="red" size="3"><a href="https://www.muyiio.com" target="_blank" rel="noopener">https://www.muyiio.com</a></font> 还是 <font color="red" size="3"><a href="https://muyiio.com" target="_blank" rel="noopener">https://muyiio.com</a> </font>，都会自动跳转到 <font color="red" size="3"><a href="http://www.imuyiio.com" target="_blank" rel="noopener">http://www.imuyiio.com</a></font>。</p></blockquote><p>然后打开你的<font color="red" size="3">github</font>博客项目，点击settings，拉到下面<font color="red" size="3">Custom domain</font>处，填上你自己的域名，保存就可以了。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/28.png" alt></p><p>现在我们的项目根目录应该会出现一个名为<font color="red" size="3">CNAME</font>的文件了。如果没有的话，打开你本地博客<font color="red" size="3">/source</font>目录，我的是<font color="red" size="3">C:\Blog\Hexo\source</font>，新建<font color="red" size="3">CNAME</font>文件，<font color="red" size="3">（注意不要加.txt，没有任何后缀名！）</font>。然后在里面写上你的域名，保存。最后运行<font color="red" size="3">hexo g、hexo d</font>上传到<font color="red" size="3">github</font>。</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/29.png" alt></p><p>现在就可以通过我们的个性化域名：<font color="red" size="3"><a href="http://www.xxx.com、xxx.com" target="_blank" rel="noopener">www.xxx.com、xxx.com</a></font>访问自己的博客了。</p><h1 id="更换自己喜欢的Hexo主题"><a href="#更换自己喜欢的Hexo主题" class="headerlink" title="更换自己喜欢的Hexo主题"></a>更换自己喜欢的Hexo主题</h1><p>点击进入<a href="https://hexo.io/themes/" title="Hexo主题专栏" target="_blank" rel="noopener">Hexo主题专栏</a>可以看到很多<font color="red" size="3">Hexo</font>主题：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/30.png" alt></p><p>推荐：</p><p><a href="https://blog.csdn.net/fail_perfectly/article/details/83791781?utm_source=app" title="几个好用的hexo主题" target="_blank" rel="noopener">几个好用的hexo主题</a> (By fail_perfectly)</p><p>这里我们以<a href="http://huangxuan.me/" title="Bean Tech" target="_blank" rel="noopener">Bean Tech</a>主题为例，下滑到底部我们可以看到他的<font color="red" size="3">GitHub</font>（<font color="red" size="3">有的主题是：Theme by xxx，点击那里也是进入GitHub地址</font>）：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/31.png" alt></p><p>点击进入主题的<font color="red" size="3">GitHub</font>地址：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/32.png" alt></p><p>复制该项目地址：</p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/33.png" alt></p><p>然后打开<font color="red" size="3"> Hexo </font>文件夹下的<font color="red" size="3"> themes</font> 目录（如：<font color="red" size="3">C:\MUYIio Blog\Hexo\themes</font>），右键<font color="red" size="3"> Git Bash Here</font>，输入以下命令：</p><pre><code>$ git clone 此处填写你刚才复制的主题地址</code></pre><p>以我们刚才复制的为例：</p><pre><code>$ git clone https://github.com/Huxpro/huxpro.github.io</code></pre><p>下载完成后即可在<font color="red" size="3"> themes </font>目录下生成 <font color="red" size="3">hexo-theme-Bean-Tech </font>文件夹，然后打开 <font color="red" size="3">Hexo</font> 文件夹下的配置文件 <font color="red" size="3">_config.yml </font>，找到关键字 <font color="red" size="3">theme</font>，修改参数为：<font color="red" size="3">theme：hexo-theme-Bean-Tech </font>（其他主题修改成相应名称即可），<strong>再次注意冒号后面有一个空格！</strong></p><p><img src="https://muyiio-1300292673.cos.ap-chongqing.myqcloud.com/%E5%8D%9A%E5%AE%A2/_posts/1/34.png" alt></p><p>现在我们的主题已经替换完成，将它部署到我们的博客，博客根目录下右键<font color="red" size="3"> Git Bash Here</font>，输入以下命令：</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>现在访问我们的网站就可以看到主题已经更换了，但是比如网站标题，图标等都没有更换，我们博客文件中有两份主要的配置文件，名称都是 <font color="red" size="3">_config.yml</font> ，它们均是用于站点配置使用的。其中，一份位于站点根目录下（比如我的：<font color="red" size="3">C:\MUYIio Blog\Hexo_config.yml</font>），主要包含<font color="red" size="3"> Hexo</font> 本身整站的配置；另一份位于主题目录下（比如我的：<font color="red" size="3">C:\MUYIio Blog\Hexo\themes\hexo-theme-matery_config.yml</font>），这份配置由主题作者提供，主要用于配置主题相关的选项，一般<font color="red" size="3"> _config.yml </font>文件里都有相关注释，按需修改即可。</p><h1 id="我的博客源代码"><a href="#我的博客源代码" class="headerlink" title="我的博客源代码"></a>我的博客源代码</h1><p><strong>我的博客源代码地址：<a href="https://github.com/MUYIio/hexo-themes-matery" target="_blank" rel="noopener">https://github.com/MUYIio/hexo-themes-matery</a>，有心的话可以给个<font color="red" size="3">Star&amp;Fork</font>。</strong></p><p>下载源代码：git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:MUYIio/hexo-themes-matery.git</p><p>在文章开头给出了快速搭建教程，相对于自己从头开始搭建还是比较方便的，修复了很多<font color="red" size="3">Bug</font>，也添加了一些插件，下载就可以使用，可以帮你们省去个性化配置带来的很多麻烦。</p><p>主题的原地址在这里：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>，作者把文档写得也非常的详细，还有中英文两个版本，建议可以多看几遍，在本地修改的时候轻松一些。</p><p>使用我的源代码之前本地的环境还是要搭建好，就是前面一部分。</p><table><tr><td bgcolor="orange">-----------------------------------------------------------------------------------------------------------                                                                                                                                                                                                            </td></tr></table><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>初学者可能会觉得困难，毕竟很多东西都是第一次接触，当初我也尝试了好几次才成功，不要放弃，弄错了就删掉重新来过，当你把博客搭建出来会觉得受益良多的。</p><p>文章中难免有错误的地方，有大佬发现了欢迎给我指正！有的地方解释不够详细，可以百度一下看看细节，文章中的引用以及参考资料涉及侵权请联系我删除！</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
